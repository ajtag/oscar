#! /bin/bash
# Script to generate the configuration '.config' file for the framework.
# Copyright (C) 2008 Supercomputing Systems AG
# 
# This library is free software; you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 2.1 of the License, or (at your option)
# any later version.
# 
# This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
# 
# You should have received a copy of the GNU Lesser General Public License along
# with this library; if not, write to the Free Software Foundation, Inc., 51
# Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

print() { echo "$1" >&2; }
inform() { print "$0: $1"; }
warn() { print "Warning: $1"; }
error() { inform "Error: $1"; }
fail() { error "$1"; exit 1; }
status() { echo -n "$1" >&2; }

trim() {
	# trim $1: cut of leading and trailing white space
	# $1: the string to trim
	
	echo $1
}

get_config_index() {
	# get_config_index: $1: Get the index of a configuration variable name in the CONFIG_NAMES array.
	# $1: Name of the configuration variable.
	
	local NAME=$1
	
	for i in ${!CONFIG_NAMES[*]}; do
		[ "${CONFIG_NAMES[$i]}" == "$NAME" ] && echo $i && return 0
	done
	
	return 1
}

get_config() {
	# get_config $1 $2: load a configuration from a configuration file
	# $1: the name of the configuration file
	# $2: name of the configuration variable
	
	local CONFIG_FILE=$1 NAME=$2
	
	local VALUE
	
	[ -e "$CONFIG_FILE" ] && VALUE=$(trim "$(grep -E "^$NAME" < $CONFIG_FILE | cut -d "=" -f 2)")
	[ $VALUE ] || VALUE=${CONFIG_DFAULTS["$(get_config_index "$NAME")"]}
	
	echo "$VALUE"
}

read_config() {
	# read_config $1: read settings from a configuration file
	# $1: name of the configuration file
	
	local NAME VALUE
	
	cat "$1" | while read i; do
		NAME=$(trim $(echo $i | cut -d "=" -f 1))
		VALUE=$(trim $(echo $i | cut -d "=" -f 2))
		
		eval $NAME="$VALUE"
	done
}

ask() {
	# ask $1 $2: ask the user something and return the answer
	# $1: the default value
	# $2: the prompt
	
	read -e -p "$2 [$1]: " 
	[ "$REPLY" ] && echo $REPLY || echo $1
}

enable_match() {
	# enable_match $1 $2: return true if the contents of the configuration variable $1 are matched by the regex $2
	
	local NAME=$1 EXPR=$2
	
	echo "${CONFIG_VALUES["$(get_config_index "$NAME")"]}" | grep -xqE "$EXPR" && return 0 || return 1
}

# global parameters
CONFIG_FILE=".config"
CONFIG_NAMES=('CONFIG_BOARD' 'CONFIG_USE_FIRMWARE' 'CONFIG_FIRMWARE_PATH')
CONFIG_PROMPTS=("Select the board you are using (INDXCAM/LEANXCAM/MESA_SR4K)." "Do you want to use an external cpld firmware (y/n)?" "Enter the path to the cpld firmware.")
CONFIG_ENABLE=('' 'enable_match CONFIG_BOARD INDXCAM' 'enable_match CONFIG_USE_FIRMWARE y')
CONFIG_CHECK=('INDXCAM|LEANXCAM|MESA_SR4K' 'y|n' '.+')
CONFIG_DFAULTS=("MESA_SR4K" "n" "../cpld")

# Read the configurations set on the command line
while [ "$1" ]; do
	NAME=$(echo "$1" | cut -d "=" -f 1)
	VALUE=$(echo "$1" | cut -d "=" -f 2)
	INDEX=$(get_config_index "$NAME")
	
	[ "$INDEX" ] && CONFIG_VALUES[$INDEX]=$VALUE || fail "Unknown option: $NAME"
	
	shift
done

# ask the user about configurations
for i in ${!CONFIG_NAMES[*]}; do
	NAME=${CONFIG_NAMES[$i]}
	
	# Check if the variable was set on the command line.
	if ! [ "${CONFIG_VALUES[$i]}" ]; then
		# Check wether the configuration should be asked.
		
		if [ "${CONFIG_ENABLE[$i]}" ]; then
			${CONFIG_ENABLE[$i]} || DO_NOT_ASK=1
		fi
		
		if [ "$DO_NOT_ASK" ]; then
			CONFIG_NAMES[$i]=
		else
			VALUE=$(get_config $CONFIG_FILE $NAME)
			PROMPT=${CONFIG_PROMPTS[$i]}
			
			while true; do
				VALUE_NEW=$(ask "$VALUE" "$PROMPT")
				
				if [ "${CONFIG_CHECK[$i]}" ]; then
					echo "$VALUE_NEW" | grep -xqE "${CONFIG_CHECK[$i]}" && break
					
					print "The configuration is not valid: $VALUE_NEW"
				else
					break
				fi
			done
			
			CONFIG_VALUES[$i]=$VALUE_NEW
		fi
	fi
done

# write the configuration file
rm -f "${CONFIG_FILE}~"
for i in ${!CONFIG_NAMES[*]}; do
	NAME=${CONFIG_NAMES[$i]}
	VALUE=${CONFIG_VALUES[$i]}
	
	[ "$NAME" ] && echo "$NAME = $VALUE" >> "${CONFIG_FILE}~"
done
mv -f "${CONFIG_FILE}~" "${CONFIG_FILE}"
